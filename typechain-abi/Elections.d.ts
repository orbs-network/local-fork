/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ContractRegistryAddressUpdated = ContractEventLog<{
  addr: string;
  0: string;
}>;
export type GuardianStatusUpdated = ContractEventLog<{
  guardian: string;
  readyToSync: boolean;
  readyForCommittee: boolean;
  0: string;
  1: boolean;
  2: boolean;
}>;
export type GuardianVotedOut = ContractEventLog<{
  guardian: string;
  0: string;
}>;
export type GuardianVotedUnready = ContractEventLog<{
  guardian: string;
  0: string;
}>;
export type InitializationComplete = ContractEventLog<{}>;
export type Locked = ContractEventLog<{}>;
export type MinSelfStakePercentMilleChanged = ContractEventLog<{
  newValue: string;
  oldValue: string;
  0: string;
  1: string;
}>;
export type RegistryManagementTransferred = ContractEventLog<{
  previousRegistryAdmin: string;
  newRegistryAdmin: string;
  0: string;
  1: string;
}>;
export type StakeChanged = ContractEventLog<{
  addr: string;
  selfDelegatedStake: string;
  delegatedStake: string;
  effectiveStake: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Unlocked = ContractEventLog<{}>;
export type VoteOutCasted = ContractEventLog<{
  voter: string;
  subject: string;
  0: string;
  1: string;
}>;
export type VoteOutPercentMilleThresholdChanged = ContractEventLog<{
  newValue: string;
  oldValue: string;
  0: string;
  1: string;
}>;
export type VoteUnreadyCasted = ContractEventLog<{
  voter: string;
  subject: string;
  expiration: string;
  0: string;
  1: string;
  2: string;
}>;
export type VoteUnreadyPercentMilleThresholdChanged = ContractEventLog<{
  newValue: string;
  oldValue: string;
  0: string;
  1: string;
}>;
export type VoteUnreadyTimeoutSecondsChanged = ContractEventLog<{
  newValue: string;
  oldValue: string;
  0: string;
  1: string;
}>;

export interface Elections extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Elections;
  clone(): Elections;
  methods: {
    canJoinCommittee(guardian: string): NonPayableTransactionObject<boolean>;

    claimRegistryManagement(): NonPayableTransactionObject<void>;

    delegatedStakeChange(
      delegate: string,
      selfDelegatedStake: number | string | BN,
      delegatedStake: number | string | BN,
      totalDelegatedStake: number | string | BN
    ): NonPayableTransactionObject<void>;

    getCommittee(): NonPayableTransactionObject<{
      committee: string[];
      weights: string[];
      orbsAddrs: string[];
      certification: boolean[];
      ips: string[];
      0: string[];
      1: string[];
      2: string[];
      3: boolean[];
      4: string[];
    }>;

    getContractRegistry(): NonPayableTransactionObject<string>;

    getEffectiveStake(guardian: string): NonPayableTransactionObject<string>;

    getMinSelfStakePercentMille(): NonPayableTransactionObject<string>;

    getSettings(): NonPayableTransactionObject<{
      minSelfStakePercentMille: string;
      voteUnreadyPercentMilleThreshold: string;
      voteOutPercentMilleThreshold: string;
      0: string;
      1: string;
      2: string;
    }>;

    getVoteOutPercentMilleThreshold(): NonPayableTransactionObject<string>;

    getVoteOutStatus(subject: string): NonPayableTransactionObject<{
      votedOut: boolean;
      votedStake: string;
      totalDelegatedStake: string;
      0: boolean;
      1: string;
      2: string;
    }>;

    getVoteOutVote(voter: string): NonPayableTransactionObject<string>;

    getVoteUnreadyPercentMilleThreshold(): NonPayableTransactionObject<string>;

    getVoteUnreadyStatus(subject: string): NonPayableTransactionObject<{
      committee: string[];
      weights: string[];
      certification: boolean[];
      votes: boolean[];
      subjectInCommittee: boolean;
      subjectInCertifiedCommittee: boolean;
      0: string[];
      1: string[];
      2: boolean[];
      3: boolean[];
      4: boolean;
      5: boolean;
    }>;

    getVoteUnreadyVote(
      voter: string,
      subject: string
    ): NonPayableTransactionObject<{
      valid: boolean;
      expiration: string;
      0: boolean;
      1: string;
    }>;

    guardianCertificationChanged(
      guardian: string,
      isCertified: boolean
    ): NonPayableTransactionObject<void>;

    guardianUnregistered(guardian: string): NonPayableTransactionObject<void>;

    initReadyForCommittee(
      guardians: string[]
    ): NonPayableTransactionObject<void>;

    initializationAdmin(): NonPayableTransactionObject<string>;

    initializationComplete(): NonPayableTransactionObject<void>;

    isInitializationComplete(): NonPayableTransactionObject<boolean>;

    isLocked(): NonPayableTransactionObject<boolean>;

    isRegistryAdmin(): NonPayableTransactionObject<boolean>;

    lock(): NonPayableTransactionObject<void>;

    locked(): NonPayableTransactionObject<boolean>;

    pendingRegistryAdmin(): NonPayableTransactionObject<string>;

    readyForCommittee(): NonPayableTransactionObject<void>;

    readyToSync(): NonPayableTransactionObject<void>;

    refreshContracts(): NonPayableTransactionObject<void>;

    registryAdmin(): NonPayableTransactionObject<string>;

    renounceRegistryManagement(): NonPayableTransactionObject<void>;

    setContractRegistry(
      newContractRegistry: string
    ): NonPayableTransactionObject<void>;

    setMinSelfStakePercentMille(
      minSelfStakePercentMille: number | string | BN
    ): NonPayableTransactionObject<void>;

    setRegistryAdmin(_registryAdmin: string): NonPayableTransactionObject<void>;

    setVoteOutPercentMilleThreshold(
      voteOutPercentMilleThreshold: number | string | BN
    ): NonPayableTransactionObject<void>;

    setVoteUnreadyPercentMilleThreshold(
      voteUnreadyPercentMilleThreshold: number | string | BN
    ): NonPayableTransactionObject<void>;

    transferRegistryManagement(
      newRegistryAdmin: string
    ): NonPayableTransactionObject<void>;

    unlock(): NonPayableTransactionObject<void>;

    voteOut(subject: string): NonPayableTransactionObject<void>;

    voteUnready(
      subject: string,
      voteExpiration: number | string | BN
    ): NonPayableTransactionObject<void>;

    votersStake(arg0: string): NonPayableTransactionObject<string>;
  };
  events: {
    ContractRegistryAddressUpdated(
      cb?: Callback<ContractRegistryAddressUpdated>
    ): EventEmitter;
    ContractRegistryAddressUpdated(
      options?: EventOptions,
      cb?: Callback<ContractRegistryAddressUpdated>
    ): EventEmitter;

    GuardianStatusUpdated(cb?: Callback<GuardianStatusUpdated>): EventEmitter;
    GuardianStatusUpdated(
      options?: EventOptions,
      cb?: Callback<GuardianStatusUpdated>
    ): EventEmitter;

    GuardianVotedOut(cb?: Callback<GuardianVotedOut>): EventEmitter;
    GuardianVotedOut(
      options?: EventOptions,
      cb?: Callback<GuardianVotedOut>
    ): EventEmitter;

    GuardianVotedUnready(cb?: Callback<GuardianVotedUnready>): EventEmitter;
    GuardianVotedUnready(
      options?: EventOptions,
      cb?: Callback<GuardianVotedUnready>
    ): EventEmitter;

    InitializationComplete(cb?: Callback<InitializationComplete>): EventEmitter;
    InitializationComplete(
      options?: EventOptions,
      cb?: Callback<InitializationComplete>
    ): EventEmitter;

    Locked(cb?: Callback<Locked>): EventEmitter;
    Locked(options?: EventOptions, cb?: Callback<Locked>): EventEmitter;

    MinSelfStakePercentMilleChanged(
      cb?: Callback<MinSelfStakePercentMilleChanged>
    ): EventEmitter;
    MinSelfStakePercentMilleChanged(
      options?: EventOptions,
      cb?: Callback<MinSelfStakePercentMilleChanged>
    ): EventEmitter;

    RegistryManagementTransferred(
      cb?: Callback<RegistryManagementTransferred>
    ): EventEmitter;
    RegistryManagementTransferred(
      options?: EventOptions,
      cb?: Callback<RegistryManagementTransferred>
    ): EventEmitter;

    StakeChanged(cb?: Callback<StakeChanged>): EventEmitter;
    StakeChanged(
      options?: EventOptions,
      cb?: Callback<StakeChanged>
    ): EventEmitter;

    Unlocked(cb?: Callback<Unlocked>): EventEmitter;
    Unlocked(options?: EventOptions, cb?: Callback<Unlocked>): EventEmitter;

    VoteOutCasted(cb?: Callback<VoteOutCasted>): EventEmitter;
    VoteOutCasted(
      options?: EventOptions,
      cb?: Callback<VoteOutCasted>
    ): EventEmitter;

    VoteOutPercentMilleThresholdChanged(
      cb?: Callback<VoteOutPercentMilleThresholdChanged>
    ): EventEmitter;
    VoteOutPercentMilleThresholdChanged(
      options?: EventOptions,
      cb?: Callback<VoteOutPercentMilleThresholdChanged>
    ): EventEmitter;

    VoteUnreadyCasted(cb?: Callback<VoteUnreadyCasted>): EventEmitter;
    VoteUnreadyCasted(
      options?: EventOptions,
      cb?: Callback<VoteUnreadyCasted>
    ): EventEmitter;

    VoteUnreadyPercentMilleThresholdChanged(
      cb?: Callback<VoteUnreadyPercentMilleThresholdChanged>
    ): EventEmitter;
    VoteUnreadyPercentMilleThresholdChanged(
      options?: EventOptions,
      cb?: Callback<VoteUnreadyPercentMilleThresholdChanged>
    ): EventEmitter;

    VoteUnreadyTimeoutSecondsChanged(
      cb?: Callback<VoteUnreadyTimeoutSecondsChanged>
    ): EventEmitter;
    VoteUnreadyTimeoutSecondsChanged(
      options?: EventOptions,
      cb?: Callback<VoteUnreadyTimeoutSecondsChanged>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "ContractRegistryAddressUpdated",
    cb: Callback<ContractRegistryAddressUpdated>
  ): void;
  once(
    event: "ContractRegistryAddressUpdated",
    options: EventOptions,
    cb: Callback<ContractRegistryAddressUpdated>
  ): void;

  once(
    event: "GuardianStatusUpdated",
    cb: Callback<GuardianStatusUpdated>
  ): void;
  once(
    event: "GuardianStatusUpdated",
    options: EventOptions,
    cb: Callback<GuardianStatusUpdated>
  ): void;

  once(event: "GuardianVotedOut", cb: Callback<GuardianVotedOut>): void;
  once(
    event: "GuardianVotedOut",
    options: EventOptions,
    cb: Callback<GuardianVotedOut>
  ): void;

  once(event: "GuardianVotedUnready", cb: Callback<GuardianVotedUnready>): void;
  once(
    event: "GuardianVotedUnready",
    options: EventOptions,
    cb: Callback<GuardianVotedUnready>
  ): void;

  once(
    event: "InitializationComplete",
    cb: Callback<InitializationComplete>
  ): void;
  once(
    event: "InitializationComplete",
    options: EventOptions,
    cb: Callback<InitializationComplete>
  ): void;

  once(event: "Locked", cb: Callback<Locked>): void;
  once(event: "Locked", options: EventOptions, cb: Callback<Locked>): void;

  once(
    event: "MinSelfStakePercentMilleChanged",
    cb: Callback<MinSelfStakePercentMilleChanged>
  ): void;
  once(
    event: "MinSelfStakePercentMilleChanged",
    options: EventOptions,
    cb: Callback<MinSelfStakePercentMilleChanged>
  ): void;

  once(
    event: "RegistryManagementTransferred",
    cb: Callback<RegistryManagementTransferred>
  ): void;
  once(
    event: "RegistryManagementTransferred",
    options: EventOptions,
    cb: Callback<RegistryManagementTransferred>
  ): void;

  once(event: "StakeChanged", cb: Callback<StakeChanged>): void;
  once(
    event: "StakeChanged",
    options: EventOptions,
    cb: Callback<StakeChanged>
  ): void;

  once(event: "Unlocked", cb: Callback<Unlocked>): void;
  once(event: "Unlocked", options: EventOptions, cb: Callback<Unlocked>): void;

  once(event: "VoteOutCasted", cb: Callback<VoteOutCasted>): void;
  once(
    event: "VoteOutCasted",
    options: EventOptions,
    cb: Callback<VoteOutCasted>
  ): void;

  once(
    event: "VoteOutPercentMilleThresholdChanged",
    cb: Callback<VoteOutPercentMilleThresholdChanged>
  ): void;
  once(
    event: "VoteOutPercentMilleThresholdChanged",
    options: EventOptions,
    cb: Callback<VoteOutPercentMilleThresholdChanged>
  ): void;

  once(event: "VoteUnreadyCasted", cb: Callback<VoteUnreadyCasted>): void;
  once(
    event: "VoteUnreadyCasted",
    options: EventOptions,
    cb: Callback<VoteUnreadyCasted>
  ): void;

  once(
    event: "VoteUnreadyPercentMilleThresholdChanged",
    cb: Callback<VoteUnreadyPercentMilleThresholdChanged>
  ): void;
  once(
    event: "VoteUnreadyPercentMilleThresholdChanged",
    options: EventOptions,
    cb: Callback<VoteUnreadyPercentMilleThresholdChanged>
  ): void;

  once(
    event: "VoteUnreadyTimeoutSecondsChanged",
    cb: Callback<VoteUnreadyTimeoutSecondsChanged>
  ): void;
  once(
    event: "VoteUnreadyTimeoutSecondsChanged",
    options: EventOptions,
    cb: Callback<VoteUnreadyTimeoutSecondsChanged>
  ): void;
}
